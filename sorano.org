#+TITLE: Sorano Project

* Setup Saltstack

** TODO One step install script


** Install docker on sorano.home
   
   Followed this [[https://docs.docker.com/engine/installation/debian/][Documentation]]

   #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano
     apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
     echo 'deb https://apt.dockerproject.org/repo debian-jessy main' >> /etc/apt/sources.list
     apt-get update
     apt-get install docker-engine
     systemctl enable docker
   #+END_SRC


** Setup salt master docker
   
   Set up dependencies for salt master docker to run
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/srv
      mkdir -p /srv/docker/volumes/saltmaster/etc/salt/pki
      mkdir -p /srv/docker/volumes/saltmaster/var/cache/salt
      mkdir -p /srv/docker/volumes/saltmaster/var/logs/salt
    #+END_SRC

    #+RESULTS:

    These directories are not controlled by the source control. 
    They are only needed to make sure the infor stored there is persisted



*** build the salt master
  
      Build the saltmaster with a ssh password as paramet. The password file is removed from the host and the docker after building the image.
      It should leave no traces.

      #+HEADER: :var ssh_pwd='not-real'
      #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject/docker/salt_master :results raw
      echo $ssh_pwd > pwdfile
      docker build -t vercapi/salt_master .
      rm pwdfile
      #+END_SRC  

      #+RESULTS:
      Sending build context to Docker daemon 37.38 kBSending build context to Docker daemon 37.38 kB
      Step 1 : FROM debian:jessie
       ---> 91bac885982d
      Step 2 : RUN apt-get update && apt-get install -y wget
       ---> Using cache
       ---> 2fda7ad65f9d
      Step 3 : RUN wget -O - https://repo.saltstack.com/apt/debian/latest/SALTSTACK-GPG-KEY.pub | apt-key add -
       ---> Using cache
       ---> 7b42cadccb6f
      Step 4 : RUN echo deb http://repo.saltstack.com/apt/debian/latest jessie main >> /etc/apt/sources.list
       ---> Using cache
       ---> a13b8e49d623
      Step 5 : VOLUME ['/etc/salt/pki', '/var/cache/salt', '/var/logs/salt', '/etc/salt/master.d', '/srv/salt', '/srv/pillar']
       ---> Using cache
       ---> 5ef6970d68dc
      Step 6 : RUN apt-get update && apt-get install -y salt-master
       ---> Using cache
       ---> 9b4abc205588
      Step 7 : COPY master /etc/salt/master
       ---> Using cache
       ---> 7b68216e39c5
      Step 8 : EXPOSE 4505 4506
       ---> Using cache
       ---> f5d868719586
      Step 9 : RUN apt-get install -y openssh-server supervisor
       ---> Using cache
       ---> fdfbd18622af
      Step 10 : RUN mkdir -p /var/run/sshd
       ---> Using cache
       ---> 36a193a4069e
      Step 11 : COPY pwdfile /etc/pwdfile
       ---> Using cache
       ---> 598de7287e09
      Step 12 : RUN echo root:`cat /etc/pwdfile` | chpasswd
       ---> Using cache
       ---> 28b75deb2cca
      Step 13 : RUN rm /etc/pwdfile
       ---> Using cache
       ---> 64c410c1fff2
      Step 14 : RUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config
       ---> Using cache
       ---> 990bf2fbeffa
      Step 15 : ENV NOTVISIBLE "in users profile"
       ---> Using cache
       ---> 12c3ff540538
      Step 16 : RUN echo "export VISIBLE=now" >> /etc/profile
       ---> Using cache
       ---> 1830b4b208df
      Step 17 : RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
       ---> Using cache
       ---> 61f7117ba640
      Step 18 : EXPOSE 22
       ---> Using cache
       ---> 7c0f74e94ef4
      Step 19 : COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
       ---> Using cache
       ---> 3230f300b4b7
      Step 20 : RUN mkdir -p /var/log/supervisor
       ---> Using cache
       ---> d242358b8743
      Step 21 : CMD /usr/bin/supervisord
       ---> Using cache
       ---> 339227c7767e
      Successfully built 339227c7767e
      
                              
*** Starting the saltmaster manually


    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|docker:saltmasterB:/etc
    ls /etc/salt/master
    #+END_SRC

    #+RESULTS:
    : /etc/salt/master

    Start as daemon
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject
      docker run -id -h sorano.salt \
             -p 4505:4505 -p 4506:4506 -p 2222:22 \
             --name saltmaster \
             -v /srv/docker/volumes/saltmaster/etc/salt/pki:/etc/salt/pki \
             -v /srv/docker/volumes/saltmaster/var/cache/salt:/var/cache/salt \
             -v /srv/docker/volumes/saltmaster/var/logs/salt:/var/logs/salt \
             -v /home/sorano/soranoProject/saltstack/master.d:/etc/salt/master.d \
             -v /home/sorano/soranoProject/saltstack/salt:/srv/salt \
             -v /home/sorano/soranoProject/saltstack/pillar:/srv/pillar \
             vercapi/salt_master
    #+END_SRC

    #+RESULTS:
    : 96a7dcfcc2b9471450660640d43f376e25cca3f5ed55c361de46c1f9f1017b2e

    Open connection to salt master to see if it is running
    #+BEGIN_SRC sh /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/
    nc -v 127.0.0.1 4506 
    #+END_SRC

    Check running dockers
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/
    docker ps
    #+END_SRC

    Manually stop the maching
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/
    docker stop saltmaster && docker rm saltmaster
    #+END_SRC

    Attach to running machine
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/
    docker exec -it saltmaster bash
    #+END_SRC



*** Set up automatic start

    Copy the file in place, reload configuration and enable the service
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject/systemd
      cp saltmaster.service /etc/systemd/system
      systemctl daemon-reload
      systemctl enable saltmaster
    #+END_SRC

    #+RESULTS:

    Start the service manually
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/ :results raw
    systemctl restart saltmaster
    systemctl status saltmaster
    #+END_SRC

    #+RESULTS:
    [1;32m●[0m saltmaster.service - Saltmaster for Sorano
       Loaded: loaded (/etc/systemd/system/saltmaster.service; enabled)
       Active: [1;32mactive (running)[0m since Sun 2015-11-29 22:44:15 CET; 7ms ago
      Process: 5715 ExecStop=/usr/bin/docker stop saltmaster (code=exited, status=0/SUCCESS)
     Main PID: 5828 (docker)
       CGroup: /system.slice/saltmaster.service
               └─5828 /usr/bin/docker run -i --rm -h sorano.salt -p 4505:4505 -p ...


** Base minion

*** Build the minion
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject/docker/debian_minion :results raw
    docker build -t vercapi/debian_minion .
    #+END_SRC

    #+RESULTS:
    Sending build context to Docker daemon 3.584 kBSending build context to Docker daemon 3.584 kB
    Step 1 : FROM debian:jessie
     ---> 91bac885982d
    Step 2 : RUN apt-get update && apt-get install -y wget
     ---> Using cache
     ---> 2fda7ad65f9d
    Step 3 : RUN wget -O - https://repo.saltstack.com/apt/debian/latest/SALTSTACK-GPG-KEY.pub | apt-key add -
     ---> Using cache
     ---> 7b42cadccb6f
    Step 4 : RUN echo deb http://repo.saltstack.com/apt/debian/latest jessie main >> /etc/apt/sources.list
     ---> Using cache
     ---> a13b8e49d623
    Step 5 : RUN apt-get update && apt-get install -y salt-minion
     ---> Using cache
     ---> b66e3cfd3379
    Step 6 : ADD ./minion /etc/salt/minion
     ---> Using cache
     ---> ed217627d9e9
    Step 7 : VOLUME ['/etc/salt/minion.d', '/etc/salt/pki']
     ---> Using cache
     ---> 70cf8a894c97
    Step 8 : CMD /usr/bin/salt-minion
     ---> Using cache
     ---> 6e47fe99fd16
    Successfully built 6e47fe99fd16


*** Running the minion manually

    Generate key on the master and place it on the master as approved, then copy the same key to the minion
    Preapares the local volumes
    minion_id or the hostname is needed so it can be copied to the correct directory    
    #+NAME: init_docker_minion
    #+HEADER: :var minion='minion.sorano'
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :result raw
      KEY_NAME=preseed_key
      PUB_KEY_FILE_NAME=$KEY_NAME.pub
      PRIV_KEY_FILE_NAME=$KEY_NAME.pem

      salt 'sorano.home' cmd.run 'mkdir -p /srv/docker/volumes/'$minion'/etc/salt/minion.d'
      salt 'sorano.home' cmd.run 'mkdir -p /srv/docker/volumes/'$minion'/etc/salt/pki'
           
      salt-key --gen-keys=$KEY_NAME
      cp $PUB_KEY_FILE_NAME /etc/salt/pki/master/minions/$minion

      salt-cp 'sorano.home' $PUB_KEY_FILE_NAME /srv/docker/volumes/$minion/etc/salt/pki/minion/minion.pub
      salt-cp 'sorano.home' $PRIV_KEY_FILE_NAME /srv/docker/volumes/$minion/etc/salt/pki/minion/minion.pem

      finish () {
          rm -f $PUB_KEY_FILE_NAME
          rm -f $PRIV_KEY_FILE_NAME
      }

      trap finish EXIT
    #+END_SRC

    #+RESULTS: init_docker_minion
    | [0;36msorano.home[0;0m: |                    |
    | [0;36msorano.home[0;0m: |                    |
    | [0;36msorano.home[0;0m: |                    |
    | [0;32mDestination         | unavailable[0;0m |
    | [0;36msorano.home[0;0m: |                    |
    | [0;32mDestination         | unavailable[0;0m |

    Start as daemon, after creating the needed directories.
    Directories will not be re-created if they already exist.
    #+NAME: start_docker_minion
    #+HEADER: :var minion='minion.sorano'
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject
      docker run -id -h $minion \
             --name $minion \
             -v /srv/docker/volumes/$minion/etc/salt/minion.d:/etc/salt/minion.d \
             -v /srv/docker/volumes/$minion/etc/salt/pki:/etc/salt/pki \
             vercapi/debian_minion
    #+END_SRC

    Removing a docker minion
    #+NAME: remove_docker_minion
    #+HEADER: :var minion='minion.sorano'
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root
      rm -f /etc/salt/pki/master/minions/$minion
      salt 'sorano.home' cmd.run 'rm -r /srv/docker/volumes/'$minion
    #+END_SRC

    Attach to running machine
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/
      docker exec -it saltminion bash
    #+END_SRC


*** Register minion with master
    
    Check for the keys
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/etc/salt :results table
    salt-key -L
    #+END_SRC

    #+RESULTS:
    | [0;1;32mAccepted           | Keys:[0;0m |
    | [0;32msorano.home[0;0m   |              |
    | [0;1;35mDenied             | Keys:[0;0m |
    | [0;1;31mUnaccepted         | Keys:[0;0m |
    | [0;31mminion.sorano[0;0m |              |
    | [0;1;34mRejected           | Keys:[0;0m |

    #+HEADER: :var minion_name='saltminion'
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/etc/salt
    salt-key -f $minion_name
    #+END_SRC

    Accept all keys
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/etc/salt
    yes | salt-key -A
    #+END_SRC

    Check the actual key of the minion on the minion
    #+BEGIN_SRC sh :dir /sudo:192.168.1.2:/root
    salt-call key.finger --local
    #+END_SRC

    Remove a key for a minion
    #+HEADER: :var minion_name='saltminion'
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/etc/salt
    salt-key -d $minion_name
    #+END_SRC


* Manage saltstack

** Pillar
   
   Show all pillars from all minions
   #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results raw
   salt '*' pillar.items
   #+END_SRC   

   #+RESULTS:
   [0;36mminion.sorano[0;0m:
       [0;36m----------[0;0m
   [0;36msorano.home[0;0m:
       [0;36m----------[0;0m
       [0;36mdockers[0;0m:
           [0;36m----------[0;0m
           [0;36msaltminion[0;0m:
               [0;32mminion[0;0m

   Push the latest pillar data to the minions
   #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results raw
   salt '*' saltutil.refresh_pillar
   #+END_SRC
   

* Containers

** Plex Media server

*** Build docker
    
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject/docker/media_server :results silent
      docker build -t vercapi/media_server .
    #+END_SRC


*** Run docker manually
    
    Setting the library directory with the correct permissions.
    Docker can't mount with specific permissions so you need to set the uid specifically
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject
      chown -R 1101:1101 /srv/docker/volumes/media.sorano/Library
    #+END_SRC

    Used for testing change -d to to -t for seeing output
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject
      docker run -id -h media.sorano \
             -p 1900:1900/udp -p 3005:3005 -p 5353:5353/udp -p 8324:8324 -p 32410:32410/udp -p 32412:32412/udp -p 34213:34213/udp -p 34214:34214/udp -p 32469:32469 -p 32400:32400 \
             -v /srv/docker/volumes/media.sorano/Library:/home/plex/Library/ \
             -v /public/music:/media/music \
             -v /public/movie:/media/movies \
             --name  media.sorano \
             vercapi/media_server
    #+END_SRC

    #+RESULTS:
    : f65353448a2d5e6a569f9428937c055b9d3dd98dcaa3cc3ef2c77dc92a535054


* TODO Backup
