#+TITLE: Sorano Project

* Setup Saltstack
  
** TODO One step install script


** Install docker on sorano.home
   
   Followed this [[https://docs.docker.com/engine/installation/debian/][Documentation]]

   #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano
     apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
     echo 'deb https://apt.dockerproject.org/repo debian-jessy main' >> /etc/apt/sources.list
     apt-get update
     apt-get install docker-engine
     systemctl enable docker
   #+END_SRC

*** TODO Make sure docker has enough disk space


** Setup salt master docker
   
   Set up dependencies for salt master docker to run
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/srv
      mkdir -p /srv/docker/volumes/saltmaster/etc/salt/pki
      mkdir -p /srv/docker/volumes/saltmaster/var/cache/salt
      mkdir -p /srv/docker/volumes/saltmaster/var/logs/salt
      mkdir -p /srv/docker/volumes/saltmaster/etc/salt/minion.d
    #+END_SRC

    #+RESULTS:

    These directories are not controlled by the source control. 
    They are only needed to make sure the infor stored there is persisted

*** build the salt master
  
      Build the saltmaster with a ssh password as paramet. The password file is removed from the host and the docker after building the image.
      It should leave no traces.

      #+HEADER: :var ssh_pwd='notreal'
      #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject/docker/salt_master :results raw
      echo $ssh_pwd > pwdfile
      docker build -t vercapi/salt_master .
      rm pwdfile
      #+END_SRC  

      #+RESULTS:
      Sending build context to Docker daemon  38.4 kBSending build context to Docker daemon  38.4 kB
      Step 1 : FROM debian:jessie
       ---> 23cb15b0fcec
      Step 2 : RUN apt-get update && apt-get install -y wget
       ---> Using cache
       ---> 55d283517c48
      Step 3 : RUN wget -O - https://repo.saltstack.com/apt/debian/latest/SALTSTACK-GPG-KEY.pub | apt-key add -
       ---> Using cache
       ---> 6cc4d0f38d83
      Step 4 : RUN echo deb http://repo.saltstack.com/apt/debian/latest jessie main >> /etc/apt/sources.list
       ---> Using cache
       ---> 90d5f7cd5b9c
      Step 5 : VOLUME ['/etc/salt/pki', '/var/cache/salt', '/var/logs/salt', '/etc/salt/master.d', '/srv/salt', '/srv/pillar', '/etc/salt/minion.d']
       ---> Using cache
       ---> 5fe3e3ee0cf2
      Step 6 : RUN apt-get update && apt-get install -y salt-master
       ---> Using cache
       ---> 26e910d78093
      Step 7 : RUN apt-get update && apt-get install -y salt-minion
       ---> Using cache
       ---> 8b3afb5792d9
      Step 8 : ADD ./minion /etc/salt/minion
       ---> Using cache
       ---> 97ffc3e78f1b
      Step 9 : COPY master /etc/salt/master
       ---> Using cache
       ---> b68a4d0d3f9a
      Step 10 : EXPOSE 4505 4506
       ---> Using cache
       ---> acbe3f0f46d9
      Step 11 : RUN apt-get update && apt-get install -y openssh-server supervisor
       ---> Using cache
       ---> 06f5c7c4ac74
      Step 12 : RUN mkdir -p /var/run/sshd
       ---> Using cache
       ---> 6dc9283f0445
      Step 13 : COPY pwdfile /etc/pwdfile
       ---> a6d5859ea9d7
      Removing intermediate container 742f189fc97d
      Step 14 : RUN echo root:`cat /etc/pwdfile` | chpasswd
       ---> Running in f79ccde4c89c
       ---> 65f7725229b8
      Removing intermediate container f79ccde4c89c
      Step 15 : RUN rm /etc/pwdfile
       ---> Running in b0a4a71dbdbf
       ---> bd1d5c049fea
      Removing intermediate container b0a4a71dbdbf
      Step 16 : RUN sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config
       ---> Running in 0e68b3977e1e
       ---> e0698c6172a1
      Removing intermediate container 0e68b3977e1e
      Step 17 : ENV NOTVISIBLE "in users profile"
       ---> Running in c4a32f74cf4b
       ---> df9f220f5694
      Removing intermediate container c4a32f74cf4b
      Step 18 : RUN echo "export VISIBLE=now" >> /etc/profile
       ---> Running in e3b01b6266dd
       ---> 9c82d0e30c18
      Removing intermediate container e3b01b6266dd
      Step 19 : RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
       ---> Running in 02d917b4ceda
       ---> 3c72099e5f87
      Removing intermediate container 02d917b4ceda
      Step 20 : EXPOSE 22
       ---> Running in a90e192c89b5
       ---> 93d167366d82
      Removing intermediate container a90e192c89b5
      Step 21 : COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
       ---> 79446f502c24
      Removing intermediate container d665728fe5e6
      Step 22 : RUN mkdir -p /var/log/supervisor
       ---> Running in 37bf1594f1d3
       ---> c90af80bede7
      Removing intermediate container 37bf1594f1d3
      Step 23 : CMD /usr/bin/supervisord
       ---> Running in ef5459c4e932
       ---> 28da4b1e34f3
      Removing intermediate container ef5459c4e932
      Successfully built 28da4b1e34f3


*** Starting the saltmaster manually


    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|docker:saltmasterB:/etc
    ls /etc/salt/master
    #+END_SRC

    #+RESULTS:
    : /etc/salt/master

    Start as daemon
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject
      docker run -id -h sorano.salt \
             -p 4505:4505 -p 4506:4506 -p 2222:22 \
             --name saltmaster \
             -v /srv/docker/volumes/saltmaster/etc/salt/pki:/etc/salt/pki \
             -v /srv/docker/volumes/saltmaster/var/cache/salt:/var/cache/salt \
             -v /srv/docker/volumes/saltmaster/var/logs/salt:/var/logs/salt \
             -v /home/sorano/soranoProject/saltstack/master.d:/etc/salt/master.d \
             -v /home/sorano/soranoProject/saltstack/salt:/srv/salt \
             -v /home/sorano/soranoProject/saltstack/pillar:/srv/pillar \
             -v /srv/docker/volumes/saltmaster/etc/salt/minion.d \
             vercapi/salt_master
    #+END_SRC

    #+RESULTS:
    : 96a7dcfcc2b9471450660640d43f376e25cca3f5ed55c361de46c1f9f1017b2e

    Open connection to salt master to see if it is running
    #+BEGIN_SRC sh /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/
    nc -v 127.0.0.1 4506 
    #+END_SRC

    Check running dockers
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/
    docker ps
    #+END_SRC

    Manually stop the maching
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/
    docker stop saltmaster && docker rm saltmaster
    #+END_SRC

    Attach to running machine
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/
    docker exec -it saltmaster bash
    #+END_SRC



*** Set up automatic start

    Copy the file in place, reload configuration and enable the service
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject/systemd
      cp saltmaster.service /etc/systemd/system
      systemctl daemon-reload
      systemctl enable saltmaster
    #+END_SRC

    #+RESULTS:

    Start the service manually
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/ :results raw
    systemctl restart saltmaster
    systemctl status saltmaster
    #+END_SRC

    #+RESULTS:
    [1;32m‚óè[0m saltmaster.service - Saltmaster for Sorano
       Loaded: loaded (/etc/systemd/system/saltmaster.service; enabled)
       Active: [1;32mactive (running)[0m since Mon 2016-03-28 22:16:42 CEST; 6ms ago
      Process: 10803 ExecStop=/usr/bin/docker stop saltmaster (code=exited, status=0/SUCCESS)
     Main PID: 10838 (docker)
       CGroup: /system.slice/saltmaster.service
               ‚îî‚îÄ10838 /usr/bin/docker run -i --rm -h sorano.salt -p 4505:4505 -p...
    

** TODO setup a machine as saltminion

   * Keep base minon file under source control
   * Setup script to setup the minion
     * Download and run the minion installer from saltstack
     * Download an place the files for the minion configuration


** Base minion

*** Build the minion

    We build the minion with a specific version. It will also label this one as the latest.

    #+HEADER: :var image_name="debian_minion" 
    #+HEADER: :var version="1.0"
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject/docker/debian_minion :results raw
    DID=$(docker build -t vercapi/${image_name} . | awk '/Successfully built/{print $NF}')
    docker tag $DID vercapi/$image_name:$version 
    docker tag $DID vercapi/$image_name:latest 
    #+END_SRC

    #+RESULTS:


*** Pre-Registering the minion with the master

    Generate key on the master and place it on the master as approved, then copy the same key to the minion
    Preapares the local volumes
    minion_id or the hostname is needed so it can be copied to the correct directory    
    #+NAME: init_docker_minion
    #+HEADER: :var minion="minion.sorano"
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results output
      KEY_NAME=preseed_key
      PUB_KEY_FILE_NAME=$KEY_NAME.pub
      PRIV_KEY_FILE_NAME=$KEY_NAME.pem

      salt 'sorano.home' cmd.run 'mkdir -p /srv/docker/volumes/'$minion'/etc/salt/minion.d'
      salt 'sorano.home' cmd.run 'mkdir -p /srv/docker/volumes/'$minion'/etc/salt/pki'
           
      salt-key --gen-keys=$KEY_NAME
      cp $PUB_KEY_FILE_NAME /etc/salt/pki/master/minions/$minion

      echo '/srv/docker/volumes/'$minion'/etc/salt/pki/minion/minion.pub'

      salt-cp 'sorano.home' $PUB_KEY_FILE_NAME '/srv/docker/volumes/'$minion'/etc/salt/pki/minion/minion.pub'
      salt-cp 'sorano.home' $PRIV_KEY_FILE_NAME '/srv/docker/volumes/'$minion'/etc/salt/pki/minion/minion.pem'

      finish () {
          rm -f $PUB_KEY_FILE_NAME
          rm -f $PRIV_KEY_FILE_NAME
      }

      trap finish EXIT
    #+END_SRC

    #+RESULTS: init_docker_minion
    [0;36msorano.home[0;0m:
    [0;36msorano.home[0;0m:
    /srv/docker/volumes/minion.sorano/etc/salt/pki/minion/minion.pub
    [0;36msorano.home[0;0m:
        [0;36m----------[0;0m
        [0;36m/srv/docker/volumes/minion.sorano/etc/salt/pki/minion/minion.pub[0;0m:
            [0;1;33mTrue[0;0m
    [0;36msorano.home[0;0m:
        [0;36m----------[0;0m
        [0;36m/srv/docker/volumes/minion.sorano/etc/salt/pki/minion/minion.pem[0;0m:
            [0;1;33mTrue[0;0m

    #+RESULTS:


*** Running the minion manually

    Start as daemon, after creating the needed directories.
    Directories will not be re-created if they already exist.
    #+NAME: start_docker_minion
    #+HEADER: :var minion="minion.sorano"
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject
      docker run -id -h $minion \
             --name $minion \
             -v /srv/docker/volumes/$minion/etc/salt/minion.d:/etc/salt/minion.d \
             -v /srv/docker/volumes/$minion/etc/salt/pki:/etc/salt/pki \
             vercapi/debian_minion
    #+END_SRC

    #+RESULTS: start_docker_minion

    Removing a docker minion
    #+NAME: remove_docker_minion
    #+HEADER: :var minion='minion.sorano'
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root
      rm -f /etc/salt/pki/master/minions/$minion
      salt 'sorano.home' cmd.run 'rm -r /srv/docker/volumes/'$minion
    #+END_SRC

    Attach to running machine
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/
      docker exec -it saltminion bash
    #+END_SRC


*** Register minion with master
    
    Check for the keys
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/etc/salt :results table
    salt-key -L
    #+END_SRC

    #+RESULTS:
    | [0;1;32mAccepted           | Keys:[0;0m |
    | [0;32msorano.home[0;0m   |              |
    | [0;1;35mDenied             | Keys:[0;0m |
    | [0;1;31mUnaccepted         | Keys:[0;0m |
    | [0;31mminion.sorano[0;0m |              |
    | [0;1;34mRejected           | Keys:[0;0m |

    #+HEADER: :var minion_name='saltminion'
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/etc/salt
    salt-key -f $minion_name
    #+END_SRC

    Accept all keys
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/etc/salt
    yes | salt-key -A
    #+END_SRC

    Check the actual key of the minion on the minion
    #+BEGIN_SRC sh :dir /sudo:192.168.1.2:/root
    salt-call key.finger --local
    #+END_SRC

    Remove a key for a minion
    #+HEADER: :var minion_name='saltminion'
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/etc/salt
    salt-key -d $minion_name
    #+END_SRC


*** Testing and development

    Running a salt state to deploy a different version for testing

    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results raw
    salt 'sorano.home' state.apply debian_minion pillar='{"home_dockers": {"minion.sorano": [{"version": "2.0"},{"name":"other"}]}}'
    #+END_SRC


*** TODO Minion build state

    State to build minion we would use the call from Testing and development to actually build it.
    But with no existing pillar file, it can only be run by supplying the arguments.

* Manage saltstack
  
** Pillar
   
   Show all pillars from all minions
   #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results raw
   salt --no-color '*' pillar.items
   #+END_SRC   

   #+RESULTS:

   Push the latest pillar data to the minions
   #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results raw
   salt --no-color '*' saltutil.refresh_pillar
   #+END_SRC

   #+RESULTS:
   media.sorano:
       True
   sorano.home:
       True
   sorano.salt:
       True
   nitro.sorano:
       True
   minion.oracletools:
       Minion did not return. [Not connected]
   livingroom.sorano:
       Minion did not return. [Not connected]
   minion.sorano:
       Minion did not return. [Not connected]

   

** Grains

   List all grains
   #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results raw
   salt --no-color '*' grains.ls
   #+END_SRC

   List grains and their values
   #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results raw
   salt --no-color 'sorano.home' grains.items
   #+END_SRC

   
** Minions

*** Upgrade
    https://docs.saltstack.com/en/latest/topics/installation/debian.html

    #+BEGIN_SRC sh :dir /sshpi@192.168.1.250:/home/pi
    wget -O - https://repo.saltstack.com/apt/debian/8/amd64/latest/SALTSTACK-GPG-KEY.pub | sudo apt-key add -    
    #+END_SRC


*** State

   Check running minions
   #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results raw
    salt-run --no-color manage.status
   #+END_SRC

   #+RESULTS:
   down:
       - livingroom.sorano
   up:
       - media.sorano
       - sorano.home
       - sorano.salt

   Check statusof minion keys
   #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results raw
   salt-key -L --no-color
   #+END_SRC

   #+RESULTS:
   
   
   Run a specific state
   '*' Can be any host or other "search criteria".
   state can be any state defined in /srv/salt
   #+BEGIN_SRC sh :di /ssh:root@192.168.1.2#2222:/root :results raw
   salt '*' sate.apply state
   #+END_SRC
   

* Manage docker

  Remove unnamed dockers
  #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject/docker/media_server :results output
    echo 'Deleting stopped containers'
    docker ps -a | grep 'Exited' | awk '{print $1}' | xargs docker rm
    echo 'Deleting idle containers'
    docker ps -a | grep 'Created' | awk '{print $1}' | xargs docker rm
    echo 'Deleting unnamed containers'
    docker images | grep "^<none>" | awk '{print $3}' xargs docker rmi
  #+END_SRC

  Connect to a docker session
  docker exec -it <docker-host> bash


* Container apps

** Base images

*** Debian base image
    :PROPERTIES:
    :header-args: :dir docker/debian_minion/
    :tangle: docker/debian_minion/Dockerfile
    :END:

    File list for debian base image:
    #+BEGIN_SRC sh :exports results :tangle no
    ls
    #+END_SRC

    #+RESULTS:
    | Dockerfile |
    | minion     |

    #+BEGIN_SRC dockerfile :exports code :padline no
      FROM debian:jessie
      RUN apt-get update && apt-get install -y wget
      
      # Add correct repository and its key
      RUN wget -O - https://repo.saltstack.com/apt/debian/latest/SALTSTACK-GPG-KEY.pub | apt-key add -
      RUN echo deb http://repo.saltstack.com/apt/debian/latest jessie main >> /etc/apt/sources.list
      
      # Install and configure salt minion
      RUN apt-get update && apt-get install -y salt-minion supervisor
      ADD ./minion /etc/salt/minion
      
      # Mapping the minion.d to git and the pki to a local direcotry so that a new run doesn't change the keys
      VOLUME ['/etc/salt/minion.d', '/etc/salt/pki']
      
      # Run the Salt Minion and do not detach from the terminal.
      # This is important because the Docker container will exit whenever
      # the CMD process exits.
      CMD /usr/bin/salt-minion
    #+END_SRC
   
   
** Plex Media server

*** TODO Build docker

    
    
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject/docker/media_server
      docker build -t vercapi/media_server .
    #+END_SRC

    #+RESULTS:


*** Run docker manually
    
    Setting the library directory with the correct permissions.
    Docker can't mount with specific permissions so you need to set the uid specifically
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject
      chown -R 1101:1101 /srv/docker/volumes/media.sorano/Library
    #+END_SRC

    Used for testing change -d to to -t for seeing output
    #+BEGIN_SRC sh :dir /ssh:sorano@192.168.1.2|sudo:192.168.1.2:/home/sorano/soranoProject
      docker run -id -h media.sorano \
             -p 1900:1900/udp -p 3005:3005 -p 5353:5353/udp -p 8324:8324 -p 32410:32410/udp -p 32412:32412/udp -p 34213:34213/udp -p 34214:34214/udp -p 32469:32469 -p 32400:32400 \
             -v /srv/docker/volumes/media.sorano/Library:/home/plex/Library/ \
             -v /public/music:/media/music \
             -v /public/movie:/media/movies \
             --name  media.sorano \
             vercapi/media_server
    #+END_SRC

    #+RESULTS:
    : f65353448a2d5e6a569f9428937c055b9d3dd98dcaa3cc3ef2c77dc92a535054


*** Saltstack config

    [[file:saltstack/salt/media_server.sls][salt state]] configuration file
    
    Run the salt state
    #+BEGIN_SRC sh :dir /ssh:root@192.168.1.2#2222:/root :results raw
    salt 'sorano.home' state.apply media_server
    #+END_SRC

**** TODO Autorun configuration
    

* Non container applications
  Software not installed as containers because it's the only functionality on the system. Or because the architecture might not be the same x86/ARM

** Kodi
   
   Guide for arch linux raspbery and x86: [[https://wiki.archlinux.org/index.php/Kodi][wiki]]

   The salt state is media_client

   Install the SuperRepo for XBMC: [[https://superrepo.org/get-started/][Instructions]]

*** Netflix

    Install netflixbmc which depends on chrome launcher.
    This will need to use chromium instead of chrome.

    For netflix to work we need the widevine [[https://aur.archlinux.org/packages/chromium-widevine/][plugin]] for chrome 
    
    Alternative is to install chrome from google
    - [[https://aur.archlinux.org/packages/google-chrome/][arch]]
    - .deb from google


*** Raspberry vs x86
    [[file:saltstack/salt/media_client/init.sls][saltstate]] should be changed to support both systems


* Systems

** Raspberry pi

   Installed arch linux
   [[http://archlinuxarm.org/platforms/armv7/broadcom/raspberry-pi-2][Installation instructions]]

   login as root perform following initial tasks. To get the system updated
   and insalled with the latest salt minion
   #+BEGIN_SRC sh
   pacman -Syu
   pacman -S salt-zmq
   #+END_SRC

   Change following lines in the /etc/salt/minion
   master: 192.168.1.2
   startup_states: highstate
   id: xxx.sorano

   restart minion
   
   accept key on master
   salt-key -a livingroom.sorano

   
** Nitro

*** Initial salt minion install
    
   After the minion is installed it will be configured by the saltmaster

   Install saltstack
   #+BEGIN_SRC sh :dir /sudo::/
   pacman -S salt-zmq
   #+END_SRC 

   Configure minion
   - Change master to 192.168.1.2 in /etc/salt/minion
   - set id: id:sorano.nitro

   Start minion
   #+BEGIN_SRC sh :dir /sudo::/
   systemctl enable salt-minion
   systemctl start salt-minion
   #+END_SRC

   Accept the key on the master


*** Oracle Tools

    This project is managed by the oracle_tools_init.sls file. 
    This state will provide the needed salt files from github to the salt master config


* TODO Security

** TODO Users

   Salt states/pillars to
   - Maintain users on systems as required
   - SSH only with key. Create private keys peruser distribute public keys
   - Management of sudoers file on machines: [[https://github.com/saltstack-formulas/sudoers-formula/tree/master/sudoers][example]]
   - DNS to manage passwords


** TODO Network


* TODO Backup
 
** Create backup state module
   [[https://docs.saltstack.com/en/latest/ref/states/writing.html][Custom state module documentation]]
   Execution states do the real work, start with this


** Steps
  - Mount backupdrive
  - Create new dir and symlinks
  - rsync
  - umount backupdrive
